package pt.ulisboa.tecnico.rnl.dei.deiint.main.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pt.ulisboa.tecnico.rnl.dei.deiint.exceptions.DeiintException;
import pt.ulisboa.tecnico.rnl.dei.deiint.exceptions.ErrorMessage;
import pt.ulisboa.tecnico.rnl.dei.deiint.main.dto.CallDto;
import pt.ulisboa.tecnico.rnl.dei.deiint.main.entity.Call;
import pt.ulisboa.tecnico.rnl.dei.deiint.main.repository.CallRepository;

@Service
@Transactional
public class CallService {
	@Autowired
	private CallRepository callRepository;

	private Call fetchCallOrThrow(long id) {
		return callRepository.findById(id)
				.orElseThrow(() -> new DeiintException(ErrorMessage.NO_SUCH_CALL, Long.toString(id)));
	}

	public List<CallDto> getAllCalls() {
		return callRepository.findAll().stream()
				.map(CallDto::new)
				.collect(Collectors.toList());
	}

	public CallDto createCall(CallDto callDto) {
		Call call = new Call(callDto);
		// TODO: validation, maybe?
		call.setId(null); // to ensure that the id is generated by the database
		return new CallDto(callRepository.save(call));
	}

	public CallDto getCall(long id) {
		return new CallDto(fetchCallOrThrow(id));
	}

	public CallDto updateCall(long id, CallDto callDto) {
		fetchCallOrThrow(id); // ensure exists

		// FIXME: hmmm, updateCall and createCall are very similar
		// maybe we should refactor this? have a
		// `private CallDto something(Long id, CallDto callDto)` method?
		// (or maybe not, pick your poison)
		Call call = new Call(callDto);
		// TODO: validation, maybe?
		call.setId(id);
		return new CallDto(callRepository.save(call));
	}

	public void deleteCall(long id) {
		fetchCallOrThrow(id); // ensure exists

		callRepository.deleteById(id);
	}
}
