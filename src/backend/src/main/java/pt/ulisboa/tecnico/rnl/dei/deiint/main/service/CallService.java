package pt.ulisboa.tecnico.rnl.dei.deiint.main.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pt.ulisboa.tecnico.rnl.dei.deiint.exceptions.DeiintException;
import pt.ulisboa.tecnico.rnl.dei.deiint.exceptions.ErrorMessage;
import pt.ulisboa.tecnico.rnl.dei.deiint.main.dto.CallDto;
import pt.ulisboa.tecnico.rnl.dei.deiint.main.entity.Call;
import pt.ulisboa.tecnico.rnl.dei.deiint.main.repository.CallRepository;

@Service
@Transactional
public class CallService {
	@Autowired
	private CallRepository callRepository;

	private Call fetchCallOrThrow(long id) {
		return callRepository.findById(id)
				.orElseThrow(() -> new DeiintException(ErrorMessage.NO_SUCH_CALL, Long.toString(id)));
	}

	public List<CallDto> getAllCalls() {
		return callRepository.findAll().stream()
				.map(CallDto::new)
				.collect(Collectors.toList());
	}

	public CallDto createCall(CallDto callDto) {
		// Verify there isn't existing call with same name
		if (callRepository.findAll().stream().anyMatch(c -> c.getName().equals(callDto.getName()))) {
            throw new DeiintException(ErrorMessage.DUPLICATE_CALL, callDto.getName());
        }

		Call call = new Call(callDto);
		call.setId(null); // To ensure that the ID is generated by the database

		// Saving could fail if DB forgets top ID
		// This just retries the save until first free ID is found
		// Shouldn't be too bad, Ideally, ig we would query the DB for that specific ID
		// Saving myself the trouble to see how that's done rn
		// This could also be used to rotate IDs in DB (i.e. IDs getting too big, reset back to 1)
		while (call.getId() == null) {
            call = callRepository.save(call);
		}
		return new CallDto(call);
	}

	public CallDto getCall(long id) {
		return new CallDto(fetchCallOrThrow(id));
	}

	public CallDto updateCall(long id, CallDto callDto) {
		fetchCallOrThrow(id); // ensure exists

		Call call = new Call(callDto);
		call.setId(id);
		return new CallDto(callRepository.save(call));
	}

	public void deleteCall(long id) {
		fetchCallOrThrow(id); // ensure exists

		callRepository.deleteById(id);
	}
}
